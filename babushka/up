#!/bin/bash

# These two are rendered per-request by the babushka webservice.
ref=master
deprecated_hard=

# Can't use $HOME, because sometimes it's not set.
# Can't use ~, because it depends on $HOME to expand.
# Can't use ~$(whoami) directly, because it doesn't expand inline.
# So: write a string in which ~$(whoami) is expanded, and run it in a subshell.
home=$(sh -c "echo ~$(whoami)")

from="https://nodeload.github.com/benhoskings/babushka/tarball/$ref"
to="$home/.babushka/bootstrap"

interactive=$([ -t 0 ] && echo 'true')

function true_with { echo -e "\n$1"; true; }
function false_with { echo -e "\n$1"; false; }

function has {
  type "$1" >/dev/null 2>&1
}

function pkg_manager {
  managers=(aptitude apt-get brew pacman yum)
  for manager in "${managers[@]}"; do
    has "$manager" && echo "$manager" && exit
  done
}

function update_manager {
  case $(pkg_manager) in
    apt-get) apt-get update -qqy ;;
    aptitude) aptitude -y update ;;
    brew) brew update ;;
    yum) true ;;
    *)
  esac
}

function install_pkgs {
  case $(pkg_manager) in
    apt-get) apt-get install -qqy $1 ;;
    aptitude) aptitude -y install $1 ;;
    brew) brew install $1 ;;
    pacman) pacman -Syq --noconfirm --noprogressbar $1 ;;
    yum) yum -y install $1 ;;
    *)
  esac
}

function warn_about_deprecated_hard {
  if [ $deprecated_hard ]; then
    echo ""
    echo "### The 'hard' option is deprecated. Instead, just use the plain"
    echo "### babushka.me/up -- it only prompts when run on a terminal now."
  fi
}

function logo {
  echo ""
  echo ".       .           .   .      "
  echo "|-. ,-. |-. . . ,-. |-. | , ,-."
  echo "| | ,-| | | | | \`-. | | |<  ,-|"
  echo "^-' \`-^ ^-' \`-^ \`-' ' ' ' \` \`-^"
}

function check {
  if ! has 'curl'; then
    if ! has $(pkg_manager); then
      echo "Sorry, you don't have curl installed, and I couldn't find\na package manager I recognise."
      has 'wget' && echo "(You do have wget, but the version on most stock VPS images doesn't do SSL.)"
      false
    elif [ $(whoami) != 'root' ] && [ $(pkg_manager) != 'brew' ]; then
      false_with "You don't have curl installed. I can install it via $(pkg_manager),\nbut only when running as root."
    else
      true
    fi
  elif ! has 'ruby'; then
    if ! has $(pkg_manager); then
      false_with "Sorry, you don't have ruby installed, and I couldn't find\na package manager I recognise."
    elif [ $(whoami) != 'root' ] && [ $(pkg_manager) != 'brew' ]; then
      false_with "You don't have ruby installed. I can install it via $(pkg_manager),\nbut only when running as root."
    else
      true
    fi
  else
    true
  fi
}

function welcome {
  echo ""
  echo "Hi there :)"
  echo ""
  echo "Let's get down to business - first, pulling a tarball of babushka from"
  echo "http://babushka.me. Then, using it to run \"babushka babushka\", which"
  echo "installs or updates babushka and its dependencies as required."
  echo ""

  if has 'curl'; then
    echo "- You already have curl."
  else
    echo "- You don't have curl installed, so we'll install it first (using $(pkg_manager))."
    has 'wget' && echo "  (You have wget, but the version on most stock VPS images doesn't do SSL.)"
  fi

  if has 'ruby'; then
    echo "- You already have ruby $(ruby --version | awk '{print $2}')."
  else
    echo "- You don't have ruby installed, so we'll install it (using $(pkg_manager))."
  fi

  if [ "$interactive" = 'true' ]; then
    echo ""
    read -p "Sound good? [y/N] " f
    [[ "$f" == y* ]] || [[ "$f" == Y* ]]
  else
    true
  fi
}

function install_pkgs_if_required {
  if has 'ruby' && has 'curl'; then
    true # already installed
  else
    pkgs="$(has 'curl' || echo 'curl') $(has 'ruby' || echo 'ruby')"
    echo ""
    echo "First we need to install $(echo $pkgs | sed 's/ / \& /') (via $(pkg_manager))."
    update_manager
    install_pkgs "$pkgs"
    if ! has 'ruby' || ! has 'curl'; then
      false_with "Argh, the install failed."
    else
      echo ""
      echo "- ruby $(ruby --version | awk '{print $2}') is present at $(which ruby)."
      echo "- curl is present at $(which curl)."
      true
    fi
  fi
}

function clean_up_install_dir {
  mkdir -p "$home/.babushka" &&
  cd "$home/.babushka" &&
  rm -rf "bootstrap"
  cd "$home"
}

function create_install_dir {
  clean_up_install_dir &&
  mkdir -p "$to" &&
  cd "$to"
}

function stream_tarball {
  echo ""
  echo "Right, downloading a tarball of babushka $ref."
  curl -L -\# "$from" | tar -zxf - --strip-components 1
}

function handle_install {
  echo "Invoking babushka $(cd "$to" && bin/babushka.rb --version) to handle the install."
  echo ""
  ruby "$to/bin/babushka.rb" meet babushka version="$ref" $([ "$interactive" = 'true' ] || echo '--defaults')
  [ $? -eq 0 ]
}

function on_install_success {
  clean_up_install_dir

  echo ""
  echo "All installed! If you're new, the basic idea is 'babushka <dep name>'."
  echo ""
  echo "Some examples you might like to try:"
  echo "  babushka babushka   # install/update babushka itself (i.e. what just happened)"
  echo "  babushka homebrew   # set up homebrew on your Mac"
  echo "  babushka rubygems   # up-to-date rubygems"
  echo ""
  echo "You can instantly run others' public deps by adding a namespace. They're pulled"
  echo "from http://github.com/<name>/babushka-deps. Some examples:"
  echo "  babushka benhoskings:Sinatra.tmbundle   # also installs TextMate if required"
  echo "  babushka conversation:coffeescript.src  # pulls in node.js if required, etc."
  echo ""
  echo "When you run deps from public sources like those, babushka anonymously posts"
  echo "success or failure to http://babushka.me, building a database anyone can search:"
  echo "  babushka search mongo   # shows mongo-related deps others have run"
  echo ""
  echo "The database is public and anonymous, and deps in local or private sources are"
  echo "never submitted. Info: http://benhoskin.gs/2010/09/24/babushka-community-stats/"
  echo ""
  echo "Resources:"
  echo "  babushka --help"
  echo "  @babushka_app"
  echo "  http://babushka.me"
  echo "  http://babushka.me/rdoc"
  echo "  http://babushka.me/mailing_list"
  true
}

function on_install_failure {
  echo ""
  echo "Something went wrong during the install."
  echo ""
  echo "If you fix the problem, you can re-run the install with:"
  echo "  ruby $to/bin/babushka.rb babushka"
  echo ""
  echo "There's a full log in ~/.babushka/logs/babushka. Would you mind"
  echo "emailing it to ben@hoskings.net to help improve the installation"
  echo "process? Thanks a lot."
  false
}

function do_bootstrap {
  install_pkgs_if_required &&
  create_install_dir &&
  stream_tarball &&
  handle_install && on_install_success || on_install_failure
}

warn_about_deprecated_hard
logo
if check; then
  if welcome; then
    do_bootstrap
  else
    echo ""
    echo "OK, maybe another time. :)"
  fi
fi
