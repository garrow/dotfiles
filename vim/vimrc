execute pathogen#infect()
set nocompatible
filetype plugin on
set bg=light
syntax on
set encoding=utf-8
set guifont=Menlo:h12
" set guifont=Inconsolata-g:h16

" Enable mouse in visual mode
" set mouse=n
" Show partially completed command sequences in bottom row.
set showcmd

" Learnings
let mapleader = ","
let maplocalleader = ","
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
inoremap jk <esc>

" Indentation
set softtabstop=2
set shiftwidth=2
set expandtab

" Allow backspace in insert mode over the current INSERT mode session.
set backspace=indent,eol,start

" Unlearning bad habits
"inoremap <left> <nop>
"inoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <left> <nop>

" Abbreviations
iabbrev @@ garrow.bedrossian@gmail.com
iabbrev gkb Garrow Bedrossian

" Wrap quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel

" Comments
autocmd FileType vim nnoremap <buffer> <localleader>c I" <esc>

" StatusLine
set laststatus=2
if !has('gui_running')
  set t_Co=256
endif
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ }

" Enable automagic indentation
" set smartindent
set autoindent

filetype indent on

" Show trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight long lines
"
"set colorcolumn=120
"highlight ColorColumn ctermbg=black
 " highlight NonText ctermfg=0 guifg=#4a4a59
 " highlight SpecialKey guifg=#4a4a59



set listchars=tab:▸\ ,eol:¬
" Ensure the gitgutter uses the same colours as LineColumn
highlight clear SignColumn
",trail:\·,extends:$,nbsp:=
set listchars=tab:»\·,trail:\·,extends:$,nbsp:=


" Split window behaviour
set splitbelow
set splitright


" Toggle relativenumber
nnoremap <leader>r :set relativenumber!<cr>
nnoremap <leader>n :set number!<cr>

" Setup word wrapping
set linebreak " Don't wrap in the middle of words

" Enable semicolon ex commands
nnoremap ; :

" Marked Preview
:nnoremap <leader>m :silent !open -a 'Marked 2.app' '%:p'<cr>
" Markdown Table Thing
command! MDT execute 'normal {j' | execute 'Tabularize/|' | execute 'MarkdownHeader'
command! MarkdownHeader execute 'normal Yp' | MarkdownTableRow
command! MarkdownTableRow s/[^|]/-/g
command! MarkdownColumnCount s/\v\|//eng
" Markdown Surround BOLD
let g:surround_{char2nr('o')} = "**\r**"

command! MDHeading1 execute 'normal Yp' | s/[^|]/=/g
command! MDHeading2 execute 'normal Yp' | s/[^|]/-/g
nnoremap <leader>1 :MDHeading1 <cr>
nnoremap <leader>2 :MDHeading2 <cr>
nnoremap <leader>t :MDT <cr>


autocmd BufNewFile,BufReadPost *.md set filetype=markdown


" ctrlp plugin
set runtimepath^=~/.vim/bundle/ctrlp.vim

" Disable gitgutter
let g:gitgutter_enabled = 0

" Toggle Search Highlight
nnoremap <leader>h :set hlsearch!<cr>

" Show syntax highlighting within Markdown Code Blocks
function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.'
  \ matchgroup='.a:textSnipHl.'
  \ start="'.a:start.'" end="'.a:end.'"
  \ contains=@'.group
endfunction

call TextEnableCodeSnip('xml', '@begin=```xml', '@end=```', 'SpecialComment')


au VimLeave * maca hide:


set backupdir=~/tmp/vim
nnoremap <leader>b :CtrlPBuffer<CR>


" Disable Vim-Pandoc folding by default
let g:pandoc#folding#fdc=0


" ↓ demonstrates the joy I felt when first defining these mappings
" oh my god, so much better

"↓ in visual mode, when I press <space>d whatever I delete goes to the
"↓ clipboard, for example, <space>dd would delete the current line and I
"↓ could CTRL-C it into Firefox or whatever
vnoremap <Leader>d "+d

"↓ same, but just copies instead of deleting
vnoremap <Leader>y "+y

"↓ paste from the clipboard
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

"↓ same as above, but for normal mode
nnoremap <Leader>d "+d
nnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P

" copy whole file (keeping cursor position)
nnoremap <Leader>c :%y+<CR>
